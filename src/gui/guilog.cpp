/***************************************************************************
 *   Copyright (C) 2004 by Walter Roth                                     *
 *   walter@amd2600-roth                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/


#include <QStackedWidget>
#include <QString>
#include <QTextEdit>
#include <QLineEdit>
#include <QCursor>
#include <QLabel>
#include <QApplication>
#include <QRegExp>

#include "guilog.h"
#include "globals.h"

typedef enum {Summary_Page, 
              Details_Page}
        pages;

GuiLog::GuiLog(QWidget* parent)
    : QWidget(parent)
{
     setupUi(this);
     setObjectName("GuiLog"); 
     stackedWidget->setCurrentIndex((int)Summary_Page);
     _Jobs = 0;
     _JobsOk = 0;
     _JobsFailed = 0;
     _JobsWarned = 0;
   qDebug("Constructor GuiLog");
}

GuiLog::~GuiLog()
{
   qDebug("Destructor GuiLog");
}


void GuiLog::setCursor ( const QCursor& cursor ){
setCursor(cursor);
textEditLog->setCursor(cursor);
}

/** Show the log messages.
*/
void GuiLog::slotShowDetails(){
 stackedWidget->setCurrentIndex((int) Details_Page);
}
/** Hide the log messages.
*/
void GuiLog::slotHideDetails(){
 stackedWidget->setCurrentIndex((int)Summary_Page);
}

/** Set the text on job number label.
*/
void GuiLog::setJobText(const QString & jobText){
 labelPresentJob->setText(jobText);
}

/** Adds the text to editLog, and increments job number on label present job.
*/
void GuiLog::addLogText(QString & logText){
  QRegExp errorCodeExp   ("[a-z, A-Z, \\s]9[0-9][0-9][0-9][a-z, A-Z,//s]"); //look for a 9000 code. 9000 to 9999 are error codes.
  QRegExp warningCodeExp ("[a-z, A-Z, \\s]3[0-9][0-9][0-9][a-z, A-Z,//s]"); //look for a 3000 code. 3000 to 3999 are warning codes.
  
  //set the message text
  QString msg;
  if(logText.indexOf(" job", 0, Qt::CaseInsensitive)== 0) //from position 0, not case sensitive 
    _Jobs ++;
  if(_Jobs == 0)
    msg = tr("Starting job execution...");
  else msg = tr("Executing job queue. Please wait.") + "\n";
  for (int nJob = 0; nJob < _Jobs; nJob++)
   msg += "*";
  if(logText.indexOf("OK", 0, Qt::CaseSensitive)>= 0) //from position 0, case sensitive 
    _JobsOk ++;
  labelPresentJob->setText(msg);  
  
  //search for error messages, error codes, warning messages or warning codes  
  if((logText.indexOf  
   (tr("failed", "THIS must BE THE SAME WORD AS USED IN Job messages, which are generated by the bank server!!!" ), 0, Qt::CaseInsensitive)>= 0) 
   || (errorCodeExp.indexIn(logText) > 0)){ //search for a 9000 code from position 0 
    _JobsFailed ++;
    logText = "<p> <b>" + logText + "</b></p>";
  } 
  //search for warning codes  
  if((logText.indexOf  
   (tr("Warning", "THIS must BE THE SAME WORD AS USED IN Job messages, which are generated by the bank server!!!" ), 0, Qt::CaseInsensitive)>= 0) 
   || (warningCodeExp.indexIn(logText) > 0)){ //search for a 3000 code from position 0
    _JobsWarned ++;
    logText = "<p> <b>" + logText + "</b></p>";
  } 
  else logText = "<p>" + logText + "</p>";
  textEditLog->setHtml(textEditLog->toHtml() + "\n" + logText);
  qApp->processEvents();
}

/** Sets the text in edit, and increments job number on label present job.
*/
void GuiLog::setLogText(QString & logText){
  textEditLog->setHtml(logText);
  _Jobs = 0;
  _JobsOk = 0;
  _JobsFailed = 0;
  _JobsWarned = 0;
  labelPresentJob->setText(tr("Preparing to execute jobs."));
}
  /** called on closeButton clicked
  */
  void GuiLog::slotCloseRequest(){
     emit closeRequest();
  }

/** Shows the results of the execution
*/
void GuiLog::showResults(){
 QString msg = 
   tr("<h3>Results of Job Execution</h3>")+
   "<table border = 0>";
   msg +=  "<tr> <td>" + tr("Number of jobs executed: ")+ "</td> <td>" + QString::number(_Jobs) + "</td>";
   msg +=  "<tr> <td>" + tr("Number of jobs OK: ") + "</td> <td>" + QString::number(_JobsOk);
   QString failedString = tr("Number of failed jobs: ");
   if(_JobsFailed > 0)
     msg +=  "<tr> <td> <b>" + failedString + "</b></td> <td><b>" + QString::number(_JobsFailed)+ "</b></td>";
   else  
     msg +=  "<tr> <td>" + failedString + "</td> <td>" + QString::number(_JobsFailed)+ "</td>";
   QString warnedString =tr("Number of jobs with warnings: ");
   if(_JobsWarned > 0)
     msg +=  "<tr> <td><b>" + warnedString + "</b></td> <td><b>" + QString::number(_JobsWarned) + "</b></td>";
   else  
     msg +=  "<tr> <td>" + warnedString + "</td> <td>" + QString::number(_JobsFailed) + "</td>";
   msg += "</table>";
   if((_JobsFailed != 0) || (_JobsWarned != 0))
     msg += tr("For details please press Show Details button. Failed jobs are printed in bold type.");
 
 labelPresentJob->setText(msg);
}
